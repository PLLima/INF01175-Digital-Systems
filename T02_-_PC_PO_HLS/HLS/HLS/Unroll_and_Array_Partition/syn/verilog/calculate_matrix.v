// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calculate_matrix_calculate_matrix,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tl-ftg256-2L,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.516000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=405,HLS_VERSION=2023_2_2}" *)

module calculate_matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_0,
        a_0_1,
        a_1_0,
        a_1_1,
        b_0_0,
        b_0_1,
        b_1_0,
        b_1_1,
        c_0_0,
        c_0_1,
        c_1_0,
        c_1_1,
        result_0_0,
        result_0_0_ap_vld,
        result_0_1,
        result_0_1_ap_vld,
        result_1_0,
        result_1_0_ap_vld,
        result_1_1,
        result_1_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] a_0_0;
input  [7:0] a_0_1;
input  [7:0] a_1_0;
input  [7:0] a_1_1;
input  [7:0] b_0_0;
input  [7:0] b_0_1;
input  [7:0] b_1_0;
input  [7:0] b_1_1;
input  [15:0] c_0_0;
input  [15:0] c_0_1;
input  [15:0] c_1_0;
input  [15:0] c_1_1;
output  [7:0] result_0_0;
output   result_0_0_ap_vld;
output  [7:0] result_0_1;
output   result_0_1_ap_vld;
output  [7:0] result_1_0;
output   result_1_0_ap_vld;
output  [7:0] result_1_1;
output   result_1_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg result_0_0_ap_vld;
reg result_0_1_ap_vld;
reg result_1_0_ap_vld;
reg result_1_1_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] zext_ln18_fu_158_p1;
wire   [15:0] zext_ln18_1_fu_162_p1;
wire   [15:0] intermediate_fu_166_p2;
reg   [15:0] intermediate_reg_353;
wire   [15:0] zext_ln18_2_fu_172_p1;
reg   [15:0] zext_ln18_2_reg_358;
wire   [15:0] zext_ln18_3_fu_176_p1;
reg   [15:0] zext_ln18_3_reg_364;
wire   [15:0] zext_ln18_4_fu_180_p1;
wire   [15:0] zext_ln18_6_fu_184_p1;
wire   [15:0] mul_ln18_2_fu_192_p2;
wire    ap_CS_fsm_state3;
wire   [15:0] mul_ln18_4_fu_201_p2;
wire   [15:0] mul_ln18_6_fu_206_p2;
wire    ap_CS_fsm_state4;
wire   [7:0] intermediate_fu_166_p0;
wire   [7:0] intermediate_fu_166_p1;
wire   [7:0] mul_ln18_2_fu_192_p0;
wire   [15:0] zext_ln18_5_fu_188_p1;
wire   [7:0] mul_ln18_2_fu_192_p1;
wire   [7:0] mul_ln18_4_fu_201_p0;
wire   [15:0] zext_ln18_7_fu_197_p1;
wire   [7:0] mul_ln18_4_fu_201_p1;
wire   [7:0] mul_ln18_6_fu_206_p0;
wire   [7:0] mul_ln18_6_fu_206_p1;
wire   [15:0] grp_fu_308_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_1_fu_212_p2;
wire   [0:0] icmp_ln22_fu_217_p2;
wire   [7:0] trunc_ln25_fu_223_p1;
wire   [15:0] grp_fu_316_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_9_fu_236_p2;
wire   [0:0] icmp_ln22_1_fu_241_p2;
wire   [7:0] trunc_ln25_1_fu_247_p1;
wire   [15:0] grp_fu_325_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_11_fu_260_p2;
wire   [0:0] icmp_ln22_2_fu_265_p2;
wire   [7:0] trunc_ln25_2_fu_271_p1;
wire   [15:0] grp_fu_334_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_7_fu_284_p2;
wire   [0:0] icmp_ln22_3_fu_289_p2;
wire   [7:0] trunc_ln25_3_fu_295_p1;
wire   [7:0] grp_fu_308_p0;
wire   [7:0] grp_fu_308_p1;
wire   [7:0] grp_fu_316_p0;
wire   [7:0] grp_fu_316_p1;
wire   [7:0] grp_fu_325_p0;
wire   [7:0] grp_fu_325_p1;
wire   [7:0] grp_fu_334_p0;
wire   [7:0] grp_fu_334_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire   [15:0] grp_fu_308_p00;
wire   [15:0] grp_fu_308_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(intermediate_fu_166_p0),
    .din1(intermediate_fu_166_p1),
    .dout(intermediate_fu_166_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul_ln18_2_fu_192_p0),
    .din1(mul_ln18_2_fu_192_p1),
    .dout(mul_ln18_2_fu_192_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(mul_ln18_4_fu_201_p0),
    .din1(mul_ln18_4_fu_201_p1),
    .dout(mul_ln18_4_fu_201_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U4(
    .din0(mul_ln18_6_fu_206_p0),
    .din1(mul_ln18_6_fu_206_p1),
    .dout(mul_ln18_6_fu_206_p2)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_308_p0),
    .din1(grp_fu_308_p1),
    .din2(intermediate_reg_353),
    .ce(1'b1),
    .dout(grp_fu_308_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_316_p0),
    .din1(grp_fu_316_p1),
    .din2(mul_ln18_2_fu_192_p2),
    .ce(1'b1),
    .dout(grp_fu_316_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_325_p0),
    .din1(grp_fu_325_p1),
    .din2(mul_ln18_4_fu_201_p2),
    .ce(1'b1),
    .dout(grp_fu_325_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .din2(mul_ln18_6_fu_206_p2),
    .ce(1'b1),
    .dout(grp_fu_334_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        intermediate_reg_353 <= intermediate_fu_166_p2;
        zext_ln18_2_reg_358[7 : 0] <= zext_ln18_2_fu_172_p1[7 : 0];
        zext_ln18_3_reg_364[7 : 0] <= zext_ln18_3_fu_176_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_0_0_ap_vld = 1'b1;
    end else begin
        result_0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_0_1_ap_vld = 1'b1;
    end else begin
        result_0_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_1_0_ap_vld = 1'b1;
    end else begin
        result_1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        result_1_1_ap_vld = 1'b1;
    end else begin
        result_1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_fu_308_p0 = grp_fu_308_p00;

assign grp_fu_308_p00 = b_1_0;

assign grp_fu_308_p1 = grp_fu_308_p10;

assign grp_fu_308_p10 = a_0_1;

assign grp_fu_316_p0 = zext_ln18_4_fu_180_p1;

assign grp_fu_316_p1 = zext_ln18_fu_158_p1;

assign grp_fu_325_p0 = zext_ln18_6_fu_184_p1;

assign grp_fu_325_p1 = zext_ln18_1_fu_162_p1;

assign grp_fu_334_p0 = zext_ln18_6_fu_184_p1;

assign grp_fu_334_p1 = zext_ln18_4_fu_180_p1;

assign icmp_ln22_1_fu_241_p2 = ((intermediate_9_fu_236_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_265_p2 = ((intermediate_11_fu_260_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_289_p2 = ((intermediate_7_fu_284_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_217_p2 = ((intermediate_1_fu_212_p2 > 16'd128) ? 1'b1 : 1'b0);

assign intermediate_11_fu_260_p2 = (grp_fu_325_p3 + c_1_0);

assign intermediate_1_fu_212_p2 = (grp_fu_308_p3 + c_0_0);

assign intermediate_7_fu_284_p2 = (grp_fu_334_p3 + c_1_1);

assign intermediate_9_fu_236_p2 = (grp_fu_316_p3 + c_0_1);

assign intermediate_fu_166_p0 = zext_ln18_1_fu_162_p1;

assign intermediate_fu_166_p1 = zext_ln18_fu_158_p1;

assign mul_ln18_2_fu_192_p0 = zext_ln18_5_fu_188_p1;

assign mul_ln18_2_fu_192_p1 = zext_ln18_2_reg_358;

assign mul_ln18_4_fu_201_p0 = zext_ln18_7_fu_197_p1;

assign mul_ln18_4_fu_201_p1 = zext_ln18_3_reg_364;

assign mul_ln18_6_fu_206_p0 = zext_ln18_7_fu_197_p1;

assign mul_ln18_6_fu_206_p1 = zext_ln18_5_fu_188_p1;

assign result_0_0 = ((icmp_ln22_fu_217_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_fu_223_p1);

assign result_0_1 = ((icmp_ln22_1_fu_241_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_1_fu_247_p1);

assign result_1_0 = ((icmp_ln22_2_fu_265_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_2_fu_271_p1);

assign result_1_1 = ((icmp_ln22_3_fu_289_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_3_fu_295_p1);

assign trunc_ln25_1_fu_247_p1 = intermediate_9_fu_236_p2[7:0];

assign trunc_ln25_2_fu_271_p1 = intermediate_11_fu_260_p2[7:0];

assign trunc_ln25_3_fu_295_p1 = intermediate_7_fu_284_p2[7:0];

assign trunc_ln25_fu_223_p1 = intermediate_1_fu_212_p2[7:0];

assign zext_ln18_1_fu_162_p1 = b_0_0;

assign zext_ln18_2_fu_172_p1 = a_0_1;

assign zext_ln18_3_fu_176_p1 = b_1_0;

assign zext_ln18_4_fu_180_p1 = b_0_1;

assign zext_ln18_5_fu_188_p1 = b_1_1;

assign zext_ln18_6_fu_184_p1 = a_1_0;

assign zext_ln18_7_fu_197_p1 = a_1_1;

assign zext_ln18_fu_158_p1 = a_0_0;

always @ (posedge ap_clk) begin
    zext_ln18_2_reg_358[15:8] <= 8'b00000000;
    zext_ln18_3_reg_364[15:8] <= 8'b00000000;
end

endmodule //calculate_matrix
