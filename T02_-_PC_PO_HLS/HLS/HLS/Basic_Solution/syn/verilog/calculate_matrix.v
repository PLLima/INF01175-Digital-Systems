// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calculate_matrix_calculate_matrix,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tl-ftg256-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.145000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=161,HLS_SYN_LUT=310,HLS_VERSION=2023_2_2}" *)

module calculate_matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        c_address0,
        c_ce0,
        c_q0,
        result_address0,
        result_ce0,
        result_we0,
        result_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [1:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [1:0] result_address0;
output   result_ce0;
output   result_we0;
output  [7:0] result_d0;

reg ap_idle;
reg a_ce0;
reg a_ce1;
reg b_ce0;
reg b_ce1;
reg c_ce0;
reg result_ce0;
reg result_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln11_fu_160_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln11_fu_190_p3;
reg   [1:0] select_ln11_reg_351;
reg   [1:0] select_ln11_reg_351_pp0_iter1_reg;
reg   [1:0] select_ln11_reg_351_pp0_iter2_reg;
wire   [1:0] shl_ln18_fu_206_p2;
reg   [1:0] shl_ln18_reg_357;
reg   [1:0] shl_ln18_reg_357_pp0_iter1_reg;
reg   [1:0] shl_ln18_reg_357_pp0_iter2_reg;
wire   [63:0] zext_ln20_fu_279_p1;
reg   [63:0] zext_ln20_reg_393;
reg   [63:0] zext_ln20_reg_393_pp0_iter4_reg;
wire   [15:0] mul_ln18_fu_288_p2;
wire   [7:0] select_ln25_fu_309_p3;
reg   [7:0] select_ln25_reg_408;
wire   [63:0] zext_ln18_4_fu_212_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln13_fu_217_p1;
wire   [63:0] zext_ln18_5_fu_256_p1;
wire   [63:0] zext_ln18_6_fu_266_p1;
reg   [1:0] j_fu_54;
wire   [1:0] add_ln13_fu_222_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_58;
wire   [1:0] select_ln11_1_fu_198_p3;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [2:0] indvar_flatten_fu_62;
wire   [2:0] add_ln11_1_fu_166_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln13_fu_184_p2;
wire   [1:0] add_ln11_fu_178_p2;
wire   [1:0] or_ln18_fu_251_p2;
wire   [1:0] xor_ln18_fu_261_p2;
wire   [1:0] add_ln20_1_fu_275_p2;
wire   [7:0] mul_ln18_fu_288_p0;
wire   [7:0] mul_ln18_fu_288_p1;
wire   [15:0] grp_fu_317_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_1_fu_294_p2;
wire   [0:0] icmp_ln22_fu_299_p2;
wire   [7:0] trunc_ln25_fu_305_p1;
wire   [7:0] grp_fu_317_p0;
wire   [7:0] grp_fu_317_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_317_p00;
wire   [15:0] grp_fu_317_p10;
wire   [15:0] mul_ln18_fu_288_p00;
wire   [15:0] mul_ln18_fu_288_p10;
reg    ap_condition_154;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 j_fu_54 = 2'd0;
#0 i_fu_58 = 2'd0;
#0 indvar_flatten_fu_62 = 3'd0;
#0 ap_done_reg = 1'b0;
end

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln18_fu_288_p0),
    .din1(mul_ln18_fu_288_p1),
    .dout(mul_ln18_fu_288_p2)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_317_p0),
    .din1(grp_fu_317_p1),
    .din2(mul_ln18_fu_288_p2),
    .ce(1'b1),
    .dout(grp_fu_317_p3)
);

calculate_matrix_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if ((icmp_ln11_fu_160_p2 == 1'd0)) begin
            i_fu_58 <= select_ln11_1_fu_198_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if ((icmp_ln11_fu_160_p2 == 1'd0)) begin
            indvar_flatten_fu_62 <= add_ln11_1_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_154)) begin
        if ((icmp_ln11_fu_160_p2 == 1'd0)) begin
            j_fu_54 <= add_ln13_fu_222_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln11_reg_351 <= select_ln11_fu_190_p3;
        select_ln11_reg_351_pp0_iter1_reg <= select_ln11_reg_351;
        shl_ln18_reg_357[1] <= shl_ln18_fu_206_p2[1];
        shl_ln18_reg_357_pp0_iter1_reg[1] <= shl_ln18_reg_357[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        select_ln11_reg_351_pp0_iter2_reg <= select_ln11_reg_351_pp0_iter1_reg;
        select_ln25_reg_408 <= select_ln25_fu_309_p3;
        shl_ln18_reg_357_pp0_iter2_reg[1] <= shl_ln18_reg_357_pp0_iter1_reg[1];
        zext_ln20_reg_393[1 : 0] <= zext_ln20_fu_279_p1[1 : 0];
        zext_ln20_reg_393_pp0_iter4_reg[1 : 0] <= zext_ln20_reg_393[1 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln18_5_fu_256_p1;

assign a_address1 = zext_ln18_4_fu_212_p1;

assign add_ln11_1_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten_load + 3'd1);

assign add_ln11_fu_178_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln13_fu_222_p2 = (select_ln11_fu_190_p3 + 2'd1);

assign add_ln20_1_fu_275_p2 = (shl_ln18_reg_357_pp0_iter2_reg + select_ln11_reg_351_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_154 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_address0 = zext_ln18_6_fu_266_p1;

assign b_address1 = zext_ln13_fu_217_p1;

assign c_address0 = zext_ln20_fu_279_p1;

assign grp_fu_317_p0 = grp_fu_317_p00;

assign grp_fu_317_p00 = b_q1;

assign grp_fu_317_p1 = grp_fu_317_p10;

assign grp_fu_317_p10 = a_q1;

assign icmp_ln11_fu_160_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_184_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_299_p2 = ((intermediate_1_fu_294_p2 > 16'd128) ? 1'b1 : 1'b0);

assign intermediate_1_fu_294_p2 = (grp_fu_317_p3 + c_q0);

assign mul_ln18_fu_288_p0 = mul_ln18_fu_288_p00;

assign mul_ln18_fu_288_p00 = b_q0;

assign mul_ln18_fu_288_p1 = mul_ln18_fu_288_p10;

assign mul_ln18_fu_288_p10 = a_q0;

assign or_ln18_fu_251_p2 = (shl_ln18_reg_357_pp0_iter1_reg | 2'd1);

assign result_address0 = zext_ln20_reg_393_pp0_iter4_reg;

assign result_d0 = select_ln25_reg_408;

assign select_ln11_1_fu_198_p3 = ((icmp_ln13_fu_184_p2[0:0] == 1'b1) ? add_ln11_fu_178_p2 : ap_sig_allocacmp_i_load);

assign select_ln11_fu_190_p3 = ((icmp_ln13_fu_184_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign select_ln25_fu_309_p3 = ((icmp_ln22_fu_299_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_fu_305_p1);

assign shl_ln18_fu_206_p2 = select_ln11_1_fu_198_p3 << 2'd1;

assign trunc_ln25_fu_305_p1 = intermediate_1_fu_294_p2[7:0];

assign xor_ln18_fu_261_p2 = (select_ln11_reg_351_pp0_iter1_reg ^ 2'd2);

assign zext_ln13_fu_217_p1 = select_ln11_fu_190_p3;

assign zext_ln18_4_fu_212_p1 = shl_ln18_fu_206_p2;

assign zext_ln18_5_fu_256_p1 = or_ln18_fu_251_p2;

assign zext_ln18_6_fu_266_p1 = xor_ln18_fu_261_p2;

assign zext_ln20_fu_279_p1 = add_ln20_1_fu_275_p2;

always @ (posedge ap_clk) begin
    shl_ln18_reg_357[0] <= 1'b0;
    shl_ln18_reg_357_pp0_iter1_reg[0] <= 1'b0;
    shl_ln18_reg_357_pp0_iter2_reg[0] <= 1'b0;
    zext_ln20_reg_393[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_393_pp0_iter4_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //calculate_matrix
