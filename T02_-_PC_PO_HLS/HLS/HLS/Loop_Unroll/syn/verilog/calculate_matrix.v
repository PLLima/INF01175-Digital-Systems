// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calculate_matrix_calculate_matrix,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tl-ftg256-2L,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.271000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=543,HLS_VERSION=2023_2_2}" *)

module calculate_matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        c_address0,
        c_ce0,
        c_q0,
        c_address1,
        c_ce1,
        c_q1,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        result_address1,
        result_ce1,
        result_we1,
        result_d1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [1:0] c_address0;
output   c_ce0;
input  [15:0] c_q0;
output  [1:0] c_address1;
output   c_ce1;
input  [15:0] c_q1;
output  [1:0] result_address0;
output   result_ce0;
output   result_we0;
output  [7:0] result_d0;
output  [1:0] result_address1;
output   result_ce1;
output   result_we1;
output  [7:0] result_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] a_address0;
reg a_ce0;
reg[1:0] a_address1;
reg a_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg[1:0] c_address0;
reg c_ce0;
reg[1:0] c_address1;
reg c_ce1;
reg[1:0] result_address0;
reg result_ce0;
reg result_we0;
reg[7:0] result_d0;
reg[1:0] result_address1;
reg result_ce1;
reg result_we1;
reg[7:0] result_d1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] zext_ln18_fu_216_p1;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln18_1_fu_220_p1;
wire   [15:0] zext_ln18_4_fu_224_p1;
wire   [15:0] zext_ln18_6_fu_228_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [15:0] mul_ln18_fu_240_p2;
wire   [15:0] mul_ln18_2_fu_250_p2;
wire   [15:0] mul_ln18_4_fu_260_p2;
wire   [15:0] mul_ln18_6_fu_266_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] grp_fu_386_p3;
reg   [15:0] add_ln20_4_reg_506;
wire   [15:0] grp_fu_394_p3;
reg   [15:0] add_ln20_6_reg_511;
wire    ap_CS_fsm_state6;
wire   [7:0] select_ln25_fu_287_p3;
wire   [7:0] select_ln25_1_fu_311_p3;
wire   [7:0] select_ln25_2_fu_335_p3;
wire   [7:0] select_ln25_3_fu_359_p3;
wire   [7:0] mul_ln18_fu_240_p0;
wire   [15:0] zext_ln18_3_fu_236_p1;
wire   [7:0] mul_ln18_fu_240_p1;
wire   [15:0] zext_ln18_2_fu_232_p1;
wire   [7:0] mul_ln18_2_fu_250_p0;
wire   [15:0] zext_ln18_5_fu_246_p1;
wire   [7:0] mul_ln18_2_fu_250_p1;
wire   [7:0] mul_ln18_4_fu_260_p0;
wire   [15:0] zext_ln18_7_fu_256_p1;
wire   [7:0] mul_ln18_4_fu_260_p1;
wire   [7:0] mul_ln18_6_fu_266_p0;
wire   [7:0] mul_ln18_6_fu_266_p1;
wire   [15:0] grp_fu_368_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_1_fu_272_p2;
wire   [0:0] icmp_ln22_fu_277_p2;
wire   [7:0] trunc_ln25_fu_283_p1;
wire   [15:0] grp_fu_377_p3;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_3_fu_296_p2;
wire   [0:0] icmp_ln22_1_fu_301_p2;
wire   [7:0] trunc_ln25_1_fu_307_p1;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_5_fu_320_p2;
wire   [0:0] icmp_ln22_2_fu_325_p2;
wire   [7:0] trunc_ln25_2_fu_331_p1;
(* use_dsp48 = "no" *) wire   [15:0] intermediate_7_fu_344_p2;
wire   [0:0] icmp_ln22_3_fu_349_p2;
wire   [7:0] trunc_ln25_3_fu_355_p1;
wire   [7:0] grp_fu_368_p0;
wire   [7:0] grp_fu_368_p1;
wire   [7:0] grp_fu_377_p0;
wire   [7:0] grp_fu_377_p1;
wire   [7:0] grp_fu_386_p0;
wire   [7:0] grp_fu_386_p1;
wire   [7:0] grp_fu_394_p0;
wire   [7:0] grp_fu_394_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln18_fu_240_p0),
    .din1(mul_ln18_fu_240_p1),
    .dout(mul_ln18_fu_240_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul_ln18_2_fu_250_p0),
    .din1(mul_ln18_2_fu_250_p1),
    .dout(mul_ln18_2_fu_250_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(mul_ln18_4_fu_260_p0),
    .din1(mul_ln18_4_fu_260_p1),
    .dout(mul_ln18_4_fu_260_p2)
);

calculate_matrix_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U4(
    .din0(mul_ln18_6_fu_266_p0),
    .din1(mul_ln18_6_fu_266_p1),
    .dout(mul_ln18_6_fu_266_p2)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_368_p0),
    .din1(grp_fu_368_p1),
    .din2(mul_ln18_fu_240_p2),
    .ce(1'b1),
    .dout(grp_fu_368_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .din2(mul_ln18_2_fu_250_p2),
    .ce(1'b1),
    .dout(grp_fu_377_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .din2(mul_ln18_4_fu_260_p2),
    .ce(1'b1),
    .dout(grp_fu_386_p3)
);

calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .din2(mul_ln18_6_fu_266_p2),
    .ce(1'b1),
    .dout(grp_fu_394_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln20_4_reg_506 <= grp_fu_386_p3;
        add_ln20_6_reg_511 <= grp_fu_394_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = 64'd2;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address1 = 64'd0;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd0;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address0 = 64'd1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_address1 = 64'd0;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_address0 = 64'd1;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_address1 = 64'd0;
    end else begin
        result_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        result_ce1 = 1'b1;
    end else begin
        result_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_d0 = select_ln25_3_fu_359_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_d0 = select_ln25_1_fu_311_p3;
    end else begin
        result_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_d1 = select_ln25_2_fu_335_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_d1 = select_ln25_fu_287_p3;
    end else begin
        result_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        result_we1 = 1'b1;
    end else begin
        result_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_fu_368_p0 = zext_ln18_1_fu_220_p1;

assign grp_fu_368_p1 = zext_ln18_fu_216_p1;

assign grp_fu_377_p0 = zext_ln18_4_fu_224_p1;

assign grp_fu_377_p1 = zext_ln18_fu_216_p1;

assign grp_fu_386_p0 = zext_ln18_6_fu_228_p1;

assign grp_fu_386_p1 = zext_ln18_1_fu_220_p1;

assign grp_fu_394_p0 = zext_ln18_6_fu_228_p1;

assign grp_fu_394_p1 = zext_ln18_4_fu_224_p1;

assign icmp_ln22_1_fu_301_p2 = ((intermediate_3_fu_296_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_325_p2 = ((intermediate_5_fu_320_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_349_p2 = ((intermediate_7_fu_344_p2 > 16'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_277_p2 = ((intermediate_1_fu_272_p2 > 16'd128) ? 1'b1 : 1'b0);

assign intermediate_1_fu_272_p2 = (grp_fu_368_p3 + c_q1);

assign intermediate_3_fu_296_p2 = (grp_fu_377_p3 + c_q0);

assign intermediate_5_fu_320_p2 = (add_ln20_4_reg_506 + c_q1);

assign intermediate_7_fu_344_p2 = (add_ln20_6_reg_511 + c_q0);

assign mul_ln18_2_fu_250_p0 = zext_ln18_5_fu_246_p1;

assign mul_ln18_2_fu_250_p1 = zext_ln18_2_fu_232_p1;

assign mul_ln18_4_fu_260_p0 = zext_ln18_7_fu_256_p1;

assign mul_ln18_4_fu_260_p1 = zext_ln18_3_fu_236_p1;

assign mul_ln18_6_fu_266_p0 = zext_ln18_7_fu_256_p1;

assign mul_ln18_6_fu_266_p1 = zext_ln18_5_fu_246_p1;

assign mul_ln18_fu_240_p0 = zext_ln18_3_fu_236_p1;

assign mul_ln18_fu_240_p1 = zext_ln18_2_fu_232_p1;

assign select_ln25_1_fu_311_p3 = ((icmp_ln22_1_fu_301_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_1_fu_307_p1);

assign select_ln25_2_fu_335_p3 = ((icmp_ln22_2_fu_325_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_2_fu_331_p1);

assign select_ln25_3_fu_359_p3 = ((icmp_ln22_3_fu_349_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_3_fu_355_p1);

assign select_ln25_fu_287_p3 = ((icmp_ln22_fu_277_p2[0:0] == 1'b1) ? 8'd128 : trunc_ln25_fu_283_p1);

assign trunc_ln25_1_fu_307_p1 = intermediate_3_fu_296_p2[7:0];

assign trunc_ln25_2_fu_331_p1 = intermediate_5_fu_320_p2[7:0];

assign trunc_ln25_3_fu_355_p1 = intermediate_7_fu_344_p2[7:0];

assign trunc_ln25_fu_283_p1 = intermediate_1_fu_272_p2[7:0];

assign zext_ln18_1_fu_220_p1 = b_q1;

assign zext_ln18_2_fu_232_p1 = a_q1;

assign zext_ln18_3_fu_236_p1 = b_q1;

assign zext_ln18_4_fu_224_p1 = b_q0;

assign zext_ln18_5_fu_246_p1 = b_q0;

assign zext_ln18_6_fu_228_p1 = a_q0;

assign zext_ln18_7_fu_256_p1 = a_q0;

assign zext_ln18_fu_216_p1 = a_q1;

endmodule //calculate_matrix
