-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculate_matrix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    result_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_we1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of calculate_matrix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calculate_matrix_calculate_matrix,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tl-ftg256-2L,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.271000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=543,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln18_fu_216_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln18_1_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_4_fu_224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_6_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln18_fu_240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_2_fu_250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_4_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_6_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_386_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_4_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_394_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_6_reg_511 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln25_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_1_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_2_fu_335_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_3_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln18_fu_240_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_3_fu_236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_2_fu_232_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_2_fu_250_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_5_fu_246_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_2_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln18_4_fu_260_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_7_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln18_4_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln18_6_fu_266_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln18_6_fu_266_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal intermediate_1_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of intermediate_1_fu_272_p2 : signal is "no";
    signal icmp_ln22_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_377_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal intermediate_3_fu_296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of intermediate_3_fu_296_p2 : signal is "no";
    signal icmp_ln22_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_1_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal intermediate_5_fu_320_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of intermediate_5_fu_320_p2 : signal is "no";
    signal icmp_ln22_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_2_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal intermediate_7_fu_344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of intermediate_7_fu_344_p2 : signal is "no";
    signal icmp_ln22_3_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_3_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component calculate_matrix_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component calculate_matrix_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln18_fu_240_p0,
        din1 => mul_ln18_fu_240_p1,
        dout => mul_ln18_fu_240_p2);

    mul_8ns_8ns_16_1_1_U2 : component calculate_matrix_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln18_2_fu_250_p0,
        din1 => mul_ln18_2_fu_250_p1,
        dout => mul_ln18_2_fu_250_p2);

    mul_8ns_8ns_16_1_1_U3 : component calculate_matrix_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln18_4_fu_260_p0,
        din1 => mul_ln18_4_fu_260_p1,
        dout => mul_ln18_4_fu_260_p2);

    mul_8ns_8ns_16_1_1_U4 : component calculate_matrix_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln18_6_fu_266_p0,
        din1 => mul_ln18_6_fu_266_p1,
        dout => mul_ln18_6_fu_266_p2);

    mac_muladd_8ns_8ns_16ns_16_4_1_U5 : component calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        din2 => mul_ln18_fu_240_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U6 : component calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        din2 => mul_ln18_2_fu_250_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U7 : component calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_386_p0,
        din1 => grp_fu_386_p1,
        din2 => mul_ln18_4_fu_260_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U8 : component calculate_matrix_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_394_p0,
        din1 => grp_fu_394_p1,
        din2 => mul_ln18_6_fu_266_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln20_4_reg_506 <= grp_fu_386_p3;
                add_ln20_6_reg_511 <= grp_fu_394_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        else 
            a_address0 <= "XX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            a_address1 <= "XX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            b_address0 <= "XX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            b_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            b_address1 <= "XX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            c_address0 <= "XX";
        end if; 
    end process;


    c_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            c_address1 <= "XX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_368_p0 <= zext_ln18_1_fu_220_p1(8 - 1 downto 0);
    grp_fu_368_p1 <= zext_ln18_fu_216_p1(8 - 1 downto 0);
    grp_fu_377_p0 <= zext_ln18_4_fu_224_p1(8 - 1 downto 0);
    grp_fu_377_p1 <= zext_ln18_fu_216_p1(8 - 1 downto 0);
    grp_fu_386_p0 <= zext_ln18_6_fu_228_p1(8 - 1 downto 0);
    grp_fu_386_p1 <= zext_ln18_1_fu_220_p1(8 - 1 downto 0);
    grp_fu_394_p0 <= zext_ln18_6_fu_228_p1(8 - 1 downto 0);
    grp_fu_394_p1 <= zext_ln18_4_fu_224_p1(8 - 1 downto 0);
    icmp_ln22_1_fu_301_p2 <= "1" when (unsigned(intermediate_3_fu_296_p2) > unsigned(ap_const_lv16_80)) else "0";
    icmp_ln22_2_fu_325_p2 <= "1" when (unsigned(intermediate_5_fu_320_p2) > unsigned(ap_const_lv16_80)) else "0";
    icmp_ln22_3_fu_349_p2 <= "1" when (unsigned(intermediate_7_fu_344_p2) > unsigned(ap_const_lv16_80)) else "0";
    icmp_ln22_fu_277_p2 <= "1" when (unsigned(intermediate_1_fu_272_p2) > unsigned(ap_const_lv16_80)) else "0";
    intermediate_1_fu_272_p2 <= std_logic_vector(unsigned(grp_fu_368_p3) + unsigned(c_q1));
    intermediate_3_fu_296_p2 <= std_logic_vector(unsigned(grp_fu_377_p3) + unsigned(c_q0));
    intermediate_5_fu_320_p2 <= std_logic_vector(unsigned(add_ln20_4_reg_506) + unsigned(c_q1));
    intermediate_7_fu_344_p2 <= std_logic_vector(unsigned(add_ln20_6_reg_511) + unsigned(c_q0));
    mul_ln18_2_fu_250_p0 <= zext_ln18_5_fu_246_p1(8 - 1 downto 0);
    mul_ln18_2_fu_250_p1 <= zext_ln18_2_fu_232_p1(8 - 1 downto 0);
    mul_ln18_4_fu_260_p0 <= zext_ln18_7_fu_256_p1(8 - 1 downto 0);
    mul_ln18_4_fu_260_p1 <= zext_ln18_3_fu_236_p1(8 - 1 downto 0);
    mul_ln18_6_fu_266_p0 <= zext_ln18_7_fu_256_p1(8 - 1 downto 0);
    mul_ln18_6_fu_266_p1 <= zext_ln18_5_fu_246_p1(8 - 1 downto 0);
    mul_ln18_fu_240_p0 <= zext_ln18_3_fu_236_p1(8 - 1 downto 0);
    mul_ln18_fu_240_p1 <= zext_ln18_2_fu_232_p1(8 - 1 downto 0);

    result_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            result_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            result_address0 <= "XX";
        end if; 
    end process;


    result_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_address1 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            result_address1 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            result_address1 <= "XX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, select_ln25_1_fu_311_p3, select_ln25_3_fu_359_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_d0 <= select_ln25_3_fu_359_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            result_d0 <= select_ln25_1_fu_311_p3;
        else 
            result_d0 <= "XXXXXXXX";
        end if; 
    end process;


    result_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, select_ln25_fu_287_p3, select_ln25_2_fu_335_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            result_d1 <= select_ln25_2_fu_335_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            result_d1 <= select_ln25_fu_287_p3;
        else 
            result_d1 <= "XXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln25_1_fu_311_p3 <= 
        ap_const_lv8_80 when (icmp_ln22_1_fu_301_p2(0) = '1') else 
        trunc_ln25_1_fu_307_p1;
    select_ln25_2_fu_335_p3 <= 
        ap_const_lv8_80 when (icmp_ln22_2_fu_325_p2(0) = '1') else 
        trunc_ln25_2_fu_331_p1;
    select_ln25_3_fu_359_p3 <= 
        ap_const_lv8_80 when (icmp_ln22_3_fu_349_p2(0) = '1') else 
        trunc_ln25_3_fu_355_p1;
    select_ln25_fu_287_p3 <= 
        ap_const_lv8_80 when (icmp_ln22_fu_277_p2(0) = '1') else 
        trunc_ln25_fu_283_p1;
    trunc_ln25_1_fu_307_p1 <= intermediate_3_fu_296_p2(8 - 1 downto 0);
    trunc_ln25_2_fu_331_p1 <= intermediate_5_fu_320_p2(8 - 1 downto 0);
    trunc_ln25_3_fu_355_p1 <= intermediate_7_fu_344_p2(8 - 1 downto 0);
    trunc_ln25_fu_283_p1 <= intermediate_1_fu_272_p2(8 - 1 downto 0);
    zext_ln18_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q1),16));
    zext_ln18_2_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),16));
    zext_ln18_3_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q1),16));
    zext_ln18_4_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),16));
    zext_ln18_5_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),16));
    zext_ln18_6_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),16));
    zext_ln18_7_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q0),16));
    zext_ln18_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_q1),16));
end behav;
