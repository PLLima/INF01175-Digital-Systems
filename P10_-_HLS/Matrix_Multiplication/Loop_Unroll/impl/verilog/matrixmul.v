// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s75-fgga676-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.100000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=173,HLS_SYN_LUT=185,HLS_VERSION=2023_2_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [1:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [1:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] a_address0;
reg a_ce0;
reg[1:0] a_address1;
reg a_ce1;
reg[1:0] b_address0;
reg b_ce0;
reg[1:0] b_address1;
reg b_ce1;
reg[1:0] res_address0;
reg res_ce0;
reg res_we0;
reg[15:0] res_d0;
reg[1:0] res_address1;
reg res_ce1;
reg res_we1;
reg[15:0] res_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_165;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [7:0] reg_169;
reg   [7:0] reg_173;
reg   [7:0] reg_177;
wire    ap_CS_fsm_state3;
wire   [15:0] zext_ln60_2_fu_181_p1;
wire    ap_CS_fsm_state5;
wire   [15:0] zext_ln60_3_fu_185_p1;
wire   [15:0] zext_ln60_5_fu_195_p1;
wire   [15:0] zext_ln60_7_fu_205_p1;
wire   [15:0] zext_ln60_fu_221_p1;
wire    ap_CS_fsm_state7;
wire   [15:0] zext_ln60_1_fu_225_p1;
wire   [15:0] zext_ln60_4_fu_229_p1;
wire   [15:0] zext_ln60_6_fu_233_p1;
wire   [15:0] grp_fu_189_p2;
reg   [15:0] mul_ln60_1_reg_353;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_199_p2;
reg   [15:0] mul_ln60_3_reg_358;
wire   [15:0] grp_fu_209_p2;
reg   [15:0] mul_ln60_5_reg_363;
wire   [15:0] grp_fu_215_p2;
reg   [15:0] mul_ln60_7_reg_368;
wire   [15:0] grp_fu_237_p3;
reg   [15:0] add_ln60_reg_373;
wire    ap_CS_fsm_state10;
wire   [15:0] grp_fu_244_p3;
reg   [15:0] add_ln60_1_reg_378;
wire   [15:0] grp_fu_251_p3;
reg   [15:0] add_ln60_2_reg_383;
wire   [15:0] grp_fu_258_p3;
reg   [15:0] add_ln60_3_reg_388;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state13;
wire   [7:0] grp_fu_189_p0;
wire   [7:0] grp_fu_189_p1;
wire   [7:0] grp_fu_199_p0;
wire   [7:0] grp_fu_199_p1;
wire   [7:0] grp_fu_209_p0;
wire   [7:0] grp_fu_209_p1;
wire   [7:0] grp_fu_215_p0;
wire   [7:0] grp_fu_215_p1;
wire   [7:0] grp_fu_237_p0;
wire   [7:0] grp_fu_237_p1;
wire    ap_CS_fsm_state9;
wire   [7:0] grp_fu_244_p0;
wire   [7:0] grp_fu_244_p1;
wire   [7:0] grp_fu_251_p0;
wire   [7:0] grp_fu_251_p1;
wire   [7:0] grp_fu_258_p0;
wire   [7:0] grp_fu_258_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

matrixmul_mul_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .din1(grp_fu_189_p1),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

matrixmul_mul_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_199_p0),
    .din1(grp_fu_199_p1),
    .ce(1'b1),
    .dout(grp_fu_199_p2)
);

matrixmul_mul_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_209_p0),
    .din1(grp_fu_209_p1),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

matrixmul_mul_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p0),
    .din1(grp_fu_215_p1),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_237_p0),
    .din1(grp_fu_237_p1),
    .din2(mul_ln60_1_reg_353),
    .ce(1'b1),
    .dout(grp_fu_237_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p0),
    .din1(grp_fu_244_p1),
    .din2(mul_ln60_3_reg_358),
    .ce(1'b1),
    .dout(grp_fu_244_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p0),
    .din1(grp_fu_251_p1),
    .din2(mul_ln60_5_reg_363),
    .ce(1'b1),
    .dout(grp_fu_251_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_258_p0),
    .din1(grp_fu_258_p1),
    .din2(mul_ln60_7_reg_368),
    .ce(1'b1),
    .dout(grp_fu_258_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln60_1_reg_378 <= grp_fu_244_p3;
        add_ln60_2_reg_383 <= grp_fu_251_p3;
        add_ln60_3_reg_388 <= grp_fu_258_p3;
        add_ln60_reg_373 <= grp_fu_237_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln60_1_reg_353 <= grp_fu_189_p2;
        mul_ln60_3_reg_358 <= grp_fu_199_p2;
        mul_ln60_5_reg_363 <= grp_fu_209_p2;
        mul_ln60_7_reg_368 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_165 <= a_q1;
        reg_169 <= b_q1;
        reg_173 <= b_q0;
        reg_177 <= a_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = 64'd3;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address1 = 64'd1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd3;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd2;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_address0 = 64'd1;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_address1 = 64'd0;
    end else begin
        res_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_d0 = add_ln60_3_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_d0 = add_ln60_1_reg_378;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_d1 = add_ln60_2_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        res_d1 = add_ln60_reg_373;
    end else begin
        res_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_189_p0 = zext_ln60_3_fu_185_p1;

assign grp_fu_189_p1 = zext_ln60_2_fu_181_p1;

assign grp_fu_199_p0 = zext_ln60_5_fu_195_p1;

assign grp_fu_199_p1 = zext_ln60_2_fu_181_p1;

assign grp_fu_209_p0 = zext_ln60_7_fu_205_p1;

assign grp_fu_209_p1 = zext_ln60_3_fu_185_p1;

assign grp_fu_215_p0 = zext_ln60_7_fu_205_p1;

assign grp_fu_215_p1 = zext_ln60_5_fu_195_p1;

assign grp_fu_237_p0 = zext_ln60_1_fu_225_p1;

assign grp_fu_237_p1 = zext_ln60_fu_221_p1;

assign grp_fu_244_p0 = zext_ln60_4_fu_229_p1;

assign grp_fu_244_p1 = zext_ln60_fu_221_p1;

assign grp_fu_251_p0 = zext_ln60_6_fu_233_p1;

assign grp_fu_251_p1 = zext_ln60_1_fu_225_p1;

assign grp_fu_258_p0 = zext_ln60_6_fu_233_p1;

assign grp_fu_258_p1 = zext_ln60_4_fu_229_p1;

assign zext_ln60_1_fu_225_p1 = reg_169;

assign zext_ln60_2_fu_181_p1 = reg_165;

assign zext_ln60_3_fu_185_p1 = reg_169;

assign zext_ln60_4_fu_229_p1 = reg_173;

assign zext_ln60_5_fu_195_p1 = reg_173;

assign zext_ln60_6_fu_233_p1 = reg_177;

assign zext_ln60_7_fu_205_p1 = reg_177;

assign zext_ln60_fu_221_p1 = reg_165;

endmodule //matrixmul
