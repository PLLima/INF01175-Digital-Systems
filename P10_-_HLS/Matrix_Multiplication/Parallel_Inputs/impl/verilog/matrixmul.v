// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s75-fgga676-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.932000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=33,HLS_VERSION=2023_2_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
input  [31:0] b;
output  [63:0] res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] trunc_ln60_fu_61_p1;
reg   [7:0] trunc_ln60_reg_222;
wire   [7:0] trunc_ln60_1_fu_65_p1;
reg   [7:0] trunc_ln60_1_reg_227;
wire   [15:0] zext_ln60_2_fu_89_p1;
wire   [15:0] zext_ln60_3_fu_93_p1;
reg   [7:0] tmp_1_reg_244;
wire   [15:0] zext_ln60_5_fu_123_p1;
reg   [7:0] tmp_3_reg_255;
wire   [15:0] zext_ln60_7_fu_153_p1;
wire   [15:0] zext_ln60_fu_169_p1;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln60_1_fu_172_p1;
wire   [15:0] zext_ln60_4_fu_175_p1;
wire   [15:0] zext_ln60_6_fu_178_p1;
wire   [15:0] grp_fu_97_p2;
reg   [15:0] mul_ln60_1_reg_290;
wire    ap_CS_fsm_state3;
wire   [15:0] grp_fu_127_p2;
reg   [15:0] mul_ln60_3_reg_295;
wire   [15:0] grp_fu_157_p2;
reg   [15:0] mul_ln60_5_reg_300;
wire   [15:0] grp_fu_163_p2;
reg   [15:0] mul_ln60_7_reg_305;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp1_fu_69_p4;
wire   [7:0] tmp_s_fu_79_p4;
wire   [7:0] grp_fu_97_p0;
wire   [7:0] grp_fu_97_p1;
wire   [7:0] tmp_2_fu_113_p4;
wire   [7:0] grp_fu_127_p0;
wire   [7:0] grp_fu_127_p1;
wire   [7:0] tmp_4_fu_143_p4;
wire   [7:0] grp_fu_157_p0;
wire   [7:0] grp_fu_157_p1;
wire   [7:0] grp_fu_163_p0;
wire   [7:0] grp_fu_163_p1;
wire   [15:0] grp_fu_214_p3;
wire   [15:0] grp_fu_206_p3;
wire   [15:0] grp_fu_198_p3;
wire   [15:0] grp_fu_190_p3;
wire   [7:0] grp_fu_190_p0;
wire   [7:0] grp_fu_190_p1;
wire    ap_CS_fsm_state4;
wire   [7:0] grp_fu_198_p0;
wire   [7:0] grp_fu_198_p1;
wire   [7:0] grp_fu_206_p0;
wire   [7:0] grp_fu_206_p1;
wire   [7:0] grp_fu_214_p0;
wire   [7:0] grp_fu_214_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

matrixmul_mul_8ns_8ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .din1(grp_fu_97_p1),
    .ce(1'b1),
    .dout(grp_fu_97_p2)
);

matrixmul_mul_8ns_8ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_127_p0),
    .din1(grp_fu_127_p1),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

matrixmul_mul_8ns_8ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

matrixmul_mul_8ns_8ns_16_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(grp_fu_163_p1),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_190_p0),
    .din1(grp_fu_190_p1),
    .din2(mul_ln60_1_reg_290),
    .ce(1'b1),
    .dout(grp_fu_190_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_198_p0),
    .din1(grp_fu_198_p1),
    .din2(mul_ln60_3_reg_295),
    .ce(1'b1),
    .dout(grp_fu_198_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .din2(mul_ln60_5_reg_300),
    .ce(1'b1),
    .dout(grp_fu_206_p3)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_214_p0),
    .din1(grp_fu_214_p1),
    .din2(mul_ln60_7_reg_305),
    .ce(1'b1),
    .dout(grp_fu_214_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln60_1_reg_290 <= grp_fu_97_p2;
        mul_ln60_3_reg_295 <= grp_fu_127_p2;
        mul_ln60_5_reg_300 <= grp_fu_157_p2;
        mul_ln60_7_reg_305 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_reg_244 <= {{b[15:8]}};
        tmp_3_reg_255 <= {{a[23:16]}};
        trunc_ln60_1_reg_227 <= trunc_ln60_1_fu_65_p1;
        trunc_ln60_reg_222 <= trunc_ln60_fu_61_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_127_p0 = zext_ln60_5_fu_123_p1;

assign grp_fu_127_p1 = zext_ln60_2_fu_89_p1;

assign grp_fu_157_p0 = zext_ln60_7_fu_153_p1;

assign grp_fu_157_p1 = zext_ln60_3_fu_93_p1;

assign grp_fu_163_p0 = zext_ln60_7_fu_153_p1;

assign grp_fu_163_p1 = zext_ln60_5_fu_123_p1;

assign grp_fu_190_p0 = zext_ln60_1_fu_172_p1;

assign grp_fu_190_p1 = zext_ln60_fu_169_p1;

assign grp_fu_198_p0 = zext_ln60_4_fu_175_p1;

assign grp_fu_198_p1 = zext_ln60_fu_169_p1;

assign grp_fu_206_p0 = zext_ln60_6_fu_178_p1;

assign grp_fu_206_p1 = zext_ln60_1_fu_172_p1;

assign grp_fu_214_p0 = zext_ln60_6_fu_178_p1;

assign grp_fu_214_p1 = zext_ln60_4_fu_175_p1;

assign grp_fu_97_p0 = zext_ln60_3_fu_93_p1;

assign grp_fu_97_p1 = zext_ln60_2_fu_89_p1;

assign res = {{{{grp_fu_214_p3}, {grp_fu_206_p3}}, {grp_fu_198_p3}}, {grp_fu_190_p3}};

assign tmp1_fu_69_p4 = {{a[15:8]}};

assign tmp_2_fu_113_p4 = {{b[31:24]}};

assign tmp_4_fu_143_p4 = {{a[31:24]}};

assign tmp_s_fu_79_p4 = {{b[23:16]}};

assign trunc_ln60_1_fu_65_p1 = b[7:0];

assign trunc_ln60_fu_61_p1 = a[7:0];

assign zext_ln60_1_fu_172_p1 = trunc_ln60_1_reg_227;

assign zext_ln60_2_fu_89_p1 = tmp1_fu_69_p4;

assign zext_ln60_3_fu_93_p1 = tmp_s_fu_79_p4;

assign zext_ln60_4_fu_175_p1 = tmp_1_reg_244;

assign zext_ln60_5_fu_123_p1 = tmp_2_fu_113_p4;

assign zext_ln60_6_fu_178_p1 = tmp_3_reg_255;

assign zext_ln60_7_fu_153_p1 = tmp_4_fu_143_p4;

assign zext_ln60_fu_169_p1 = trunc_ln60_reg_222;

endmodule //matrixmul
