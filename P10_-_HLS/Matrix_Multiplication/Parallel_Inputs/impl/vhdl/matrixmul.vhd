-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    res : OUT STD_LOGIC_VECTOR (63 downto 0);
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s75-fgga676-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.932000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=33,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln60_fu_61_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_fu_65_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_reg_227 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln60_2_fu_89_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln60_3_fu_93_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln60_5_fu_123_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln60_7_fu_153_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln60_fu_169_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln60_1_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln60_4_fu_175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln60_6_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_1_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_3_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_5_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_7_reg_305 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp1_fu_69_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_79_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_113_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_127_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_143_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_214_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_206_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_198_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8ns_8ns_16_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8ns_8ns_16_3_1_U1 : component matrixmul_mul_8ns_8ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        din1 => grp_fu_97_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p2);

    mul_8ns_8ns_16_3_1_U2 : component matrixmul_mul_8ns_8ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_127_p0,
        din1 => grp_fu_127_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p2);

    mul_8ns_8ns_16_3_1_U3 : component matrixmul_mul_8ns_8ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    mul_8ns_8ns_16_3_1_U4 : component matrixmul_mul_8ns_8ns_16_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);

    mac_muladd_8ns_8ns_16ns_16_4_1_U5 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        din2 => mul_ln60_1_reg_290,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U6 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        din2 => mul_ln60_3_reg_295,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U7 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        din2 => mul_ln60_5_reg_300,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p3);

    mac_muladd_8ns_8ns_16ns_16_4_1_U8 : component matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        din2 => mul_ln60_7_reg_305,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln60_1_reg_290 <= grp_fu_97_p2;
                mul_ln60_3_reg_295 <= grp_fu_127_p2;
                mul_ln60_5_reg_300 <= grp_fu_157_p2;
                mul_ln60_7_reg_305 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_1_reg_244 <= b(15 downto 8);
                tmp_3_reg_255 <= a(23 downto 16);
                trunc_ln60_1_reg_227 <= trunc_ln60_1_fu_65_p1;
                trunc_ln60_reg_222 <= trunc_ln60_fu_61_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_127_p0 <= zext_ln60_5_fu_123_p1(8 - 1 downto 0);
    grp_fu_127_p1 <= zext_ln60_2_fu_89_p1(8 - 1 downto 0);
    grp_fu_157_p0 <= zext_ln60_7_fu_153_p1(8 - 1 downto 0);
    grp_fu_157_p1 <= zext_ln60_3_fu_93_p1(8 - 1 downto 0);
    grp_fu_163_p0 <= zext_ln60_7_fu_153_p1(8 - 1 downto 0);
    grp_fu_163_p1 <= zext_ln60_5_fu_123_p1(8 - 1 downto 0);
    grp_fu_190_p0 <= zext_ln60_1_fu_172_p1(8 - 1 downto 0);
    grp_fu_190_p1 <= zext_ln60_fu_169_p1(8 - 1 downto 0);
    grp_fu_198_p0 <= zext_ln60_4_fu_175_p1(8 - 1 downto 0);
    grp_fu_198_p1 <= zext_ln60_fu_169_p1(8 - 1 downto 0);
    grp_fu_206_p0 <= zext_ln60_6_fu_178_p1(8 - 1 downto 0);
    grp_fu_206_p1 <= zext_ln60_1_fu_172_p1(8 - 1 downto 0);
    grp_fu_214_p0 <= zext_ln60_6_fu_178_p1(8 - 1 downto 0);
    grp_fu_214_p1 <= zext_ln60_4_fu_175_p1(8 - 1 downto 0);
    grp_fu_97_p0 <= zext_ln60_3_fu_93_p1(8 - 1 downto 0);
    grp_fu_97_p1 <= zext_ln60_2_fu_89_p1(8 - 1 downto 0);
    res <= (((grp_fu_214_p3 & grp_fu_206_p3) & grp_fu_198_p3) & grp_fu_190_p3);

    res_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_69_p4 <= a(15 downto 8);
    tmp_2_fu_113_p4 <= b(31 downto 24);
    tmp_4_fu_143_p4 <= a(31 downto 24);
    tmp_s_fu_79_p4 <= b(23 downto 16);
    trunc_ln60_1_fu_65_p1 <= b(8 - 1 downto 0);
    trunc_ln60_fu_61_p1 <= a(8 - 1 downto 0);
    zext_ln60_1_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln60_1_reg_227),16));
    zext_ln60_2_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_69_p4),16));
    zext_ln60_3_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_79_p4),16));
    zext_ln60_4_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_244),16));
    zext_ln60_5_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_113_p4),16));
    zext_ln60_6_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_255),16));
    zext_ln60_7_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_143_p4),16));
    zext_ln60_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln60_reg_222),16));
end behav;
