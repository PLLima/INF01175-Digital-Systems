// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s75-fgga676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.387000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=163,HLS_SYN_LUT=257,HLS_VERSION=2023_2_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [1:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [1:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [1:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [1:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_idle;
reg a_ce0;
reg a_ce1;
reg b_ce0;
reg b_ce1;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln54_fu_171_p3;
reg   [1:0] select_ln54_reg_308;
reg   [1:0] select_ln54_reg_308_pp0_iter1_reg;
reg   [1:0] select_ln54_reg_308_pp0_iter2_reg;
reg   [1:0] select_ln54_reg_308_pp0_iter3_reg;
wire   [1:0] shl_ln60_fu_187_p2;
reg   [1:0] shl_ln60_reg_314;
reg   [1:0] shl_ln60_reg_314_pp0_iter1_reg;
reg   [1:0] shl_ln60_reg_314_pp0_iter2_reg;
reg   [1:0] shl_ln60_reg_314_pp0_iter3_reg;
wire   [15:0] mul_ln60_1_fu_260_p2;
reg   [15:0] mul_ln60_1_reg_350;
wire   [63:0] zext_ln60_4_fu_193_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln56_fu_198_p1;
wire   [63:0] zext_ln60_5_fu_229_p1;
wire   [63:0] zext_ln60_6_fu_243_p1;
wire   [63:0] zext_ln60_7_fu_270_p1;
reg   [1:0] j_fu_48;
wire   [1:0] add_ln56_fu_203_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_52;
wire   [1:0] select_ln54_1_fu_179_p3;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [2:0] indvar_flatten_fu_56;
wire   [2:0] add_ln54_1_fu_147_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] grp_fu_275_p3;
wire   [0:0] icmp_ln56_fu_165_p2;
wire   [1:0] add_ln54_fu_159_p2;
wire   [1:0] or_ln60_fu_224_p2;
wire   [1:0] xor_ln60_fu_238_p2;
wire   [7:0] mul_ln60_1_fu_260_p0;
wire   [7:0] mul_ln60_1_fu_260_p1;
wire   [1:0] add_ln60_1_fu_266_p2;
wire   [7:0] grp_fu_275_p0;
wire   [7:0] grp_fu_275_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_275_p00;
wire   [15:0] grp_fu_275_p10;
wire   [15:0] mul_ln60_1_fu_260_p00;
wire   [15:0] mul_ln60_1_fu_260_p10;
reg    ap_condition_138;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_48 = 2'd0;
#0 i_fu_52 = 2'd0;
#0 indvar_flatten_fu_56 = 3'd0;
#0 ap_done_reg = 1'b0;
end

matrixmul_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln60_1_fu_260_p0),
    .din1(mul_ln60_1_fu_260_p1),
    .dout(mul_ln60_1_fu_260_p2)
);

matrixmul_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_275_p0),
    .din1(grp_fu_275_p1),
    .din2(mul_ln60_1_reg_350),
    .ce(1'b1),
    .dout(grp_fu_275_p3)
);

matrixmul_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_138)) begin
        if ((icmp_ln54_fu_141_p2 == 1'd0)) begin
            i_fu_52 <= select_ln54_1_fu_179_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_138)) begin
        if ((icmp_ln54_fu_141_p2 == 1'd0)) begin
            indvar_flatten_fu_56 <= add_ln54_1_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_138)) begin
        if ((icmp_ln54_fu_141_p2 == 1'd0)) begin
            j_fu_48 <= add_ln56_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln54_reg_308 <= select_ln54_fu_171_p3;
        select_ln54_reg_308_pp0_iter1_reg <= select_ln54_reg_308;
        shl_ln60_reg_314[1] <= shl_ln60_fu_187_p2[1];
        shl_ln60_reg_314_pp0_iter1_reg[1] <= shl_ln60_reg_314[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln60_1_reg_350 <= mul_ln60_1_fu_260_p2;
        select_ln54_reg_308_pp0_iter2_reg <= select_ln54_reg_308_pp0_iter1_reg;
        select_ln54_reg_308_pp0_iter3_reg <= select_ln54_reg_308_pp0_iter2_reg;
        shl_ln60_reg_314_pp0_iter2_reg[1] <= shl_ln60_reg_314_pp0_iter1_reg[1];
        shl_ln60_reg_314_pp0_iter3_reg[1] <= shl_ln60_reg_314_pp0_iter2_reg[1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln60_5_fu_229_p1;

assign a_address1 = zext_ln60_4_fu_193_p1;

assign add_ln54_1_fu_147_p2 = (ap_sig_allocacmp_indvar_flatten_load + 3'd1);

assign add_ln54_fu_159_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln56_fu_203_p2 = (select_ln54_fu_171_p3 + 2'd1);

assign add_ln60_1_fu_266_p2 = (shl_ln60_reg_314_pp0_iter3_reg + select_ln54_reg_308_pp0_iter3_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_138 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_address0 = zext_ln60_6_fu_243_p1;

assign b_address1 = zext_ln56_fu_198_p1;

assign grp_fu_275_p0 = grp_fu_275_p00;

assign grp_fu_275_p00 = b_q1;

assign grp_fu_275_p1 = grp_fu_275_p10;

assign grp_fu_275_p10 = a_q1;

assign icmp_ln54_fu_141_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_165_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign mul_ln60_1_fu_260_p0 = mul_ln60_1_fu_260_p00;

assign mul_ln60_1_fu_260_p00 = b_q0;

assign mul_ln60_1_fu_260_p1 = mul_ln60_1_fu_260_p10;

assign mul_ln60_1_fu_260_p10 = a_q0;

assign or_ln60_fu_224_p2 = (shl_ln60_reg_314 | 2'd1);

assign res_address0 = zext_ln60_7_fu_270_p1;

assign res_d0 = grp_fu_275_p3;

assign select_ln54_1_fu_179_p3 = ((icmp_ln56_fu_165_p2[0:0] == 1'b1) ? add_ln54_fu_159_p2 : ap_sig_allocacmp_i_load);

assign select_ln54_fu_171_p3 = ((icmp_ln56_fu_165_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign shl_ln60_fu_187_p2 = select_ln54_1_fu_179_p3 << 2'd1;

assign xor_ln60_fu_238_p2 = (select_ln54_reg_308 ^ 2'd2);

assign zext_ln56_fu_198_p1 = select_ln54_fu_171_p3;

assign zext_ln60_4_fu_193_p1 = shl_ln60_fu_187_p2;

assign zext_ln60_5_fu_229_p1 = or_ln60_fu_224_p2;

assign zext_ln60_6_fu_243_p1 = xor_ln60_fu_238_p2;

assign zext_ln60_7_fu_270_p1 = add_ln60_1_fu_266_p2;

always @ (posedge ap_clk) begin
    shl_ln60_reg_314[0] <= 1'b0;
    shl_ln60_reg_314_pp0_iter1_reg[0] <= 1'b0;
    shl_ln60_reg_314_pp0_iter2_reg[0] <= 1'b0;
    shl_ln60_reg_314_pp0_iter3_reg[0] <= 1'b0;
end

endmodule //matrixmul
